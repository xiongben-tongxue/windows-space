package com.ztesoft.zsmart.bss.sfa.lead.dao.mysqlimpl;

/**
 * <p>Title:ZSMART </p>
 *
 * <p>Description: SfaLeadAttrValueDAO </p>
 *
 * <p>Copyright: Copyright (c) 2011</p>
 *
 * <p>Company:ztesoft </p>
 *
 * <p>Created Date:2012/7/19 15:52:55 </p>
 *
 * @author:   Auto Generated by CodeSmith 3.0 
 * @version R13
 */

import com.ztesoft.zsmart.bss.sfa.lead.dao.ISfaLeadAttrValueDAO;
import com.ztesoft.zsmart.bss.sfa.lead.model.SfaLeadAttrValueDto;
import com.ztesoft.zsmart.core.exception.BaseAppException;
import com.ztesoft.zsmart.core.jdbc.BaseDAO;
import com.ztesoft.zsmart.core.jdbc.ParamArray;
import com.ztesoft.zsmart.core.jdbc.rowset.RowSetMapper;
import com.ztesoft.zsmart.core.jdbc.rowset.RowSetOperator;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * 
 * <Description> <br> 
 *  
 * @author <br>
 * @version V8<br>
 * @taskId <br>
 * @CreateDate 2012-9-4 <br>
 * @since V8<br>
 * @see com.ztesoft.zsmart.bss.sfa.lead.dao.abstractimpl <br>
 */
public class SfaLeadAttrValueDAOMysql extends BaseDAO implements ISfaLeadAttrValueDAO {
    /**
     * 构造函数
     */
    public SfaLeadAttrValueDAOMysql() {
    }

    /**
     * 
     * Description:增加 <br> 
     *  
     * @author <br>
     * @taskId <br>
     * @param dto SfaLeadAttrValueDto
     * @return SfaLeadAttrValueDto
     * @throws BaseAppException <br>
     */
    public SfaLeadAttrValueDto insertSfaLeadAttrValue(SfaLeadAttrValueDto dto) throws BaseAppException {
        String sqlStr = "INSERT INTO \r\n" + " SFA_LEAD_ATTR_VALUE(LEAD_ID,ATTR_ID,VALUE,SP_ID) \r\n"
            + " VALUES(?,?,?,?)";

        ParamArray pa = new ParamArray();

        pa.set("", dto.getLeadId());
        pa.set("", dto.getAttrId());
        pa.set("", dto.getValue());
        pa.set("", dto.getSpId());

        executeUpdate(sqlStr, pa);
        return dto;
    }

    /**
     * 
     * Description: 修改<br> 
     *  
     * @author <br>
     * @taskId <br>
     * @param dto SfaLeadAttrValueDto
     * @return int
     * @throws BaseAppException <br>
     */
    public int updateSfaLeadAttrValue(SfaLeadAttrValueDto dto) throws BaseAppException {
        String sqlStr = "UPDATE SFA_LEAD_ATTR_VALUE\r\n" + " SET   VALUE=?,SP_ID=? \r\n"
            + " WHERE LEAD_ID=? AND ATTR_ID=?";

        ParamArray pa = new ParamArray();

        pa.set("", dto.getValue());
        pa.set("", dto.getSpId());
        pa.set("", dto.getLeadId());
        pa.set("", dto.getAttrId());

        return executeUpdate(sqlStr, pa);
    }

    /**
     * 
     * Description:删除 <br> 
     *  
     * @author <br>
     * @taskId <br>
     * @param leadId Long
     * @param attrId Long
     * @return int
     * @throws BaseAppException <br>
     */
    public int deleteSfaLeadAttrValue(Long leadId, Long attrId) throws BaseAppException {
        String sqlStr = "DELETE SFA_LEAD_ATTR_VALUE\r\n" + " WHERE LEAD_ID=? AND ATTR_ID=?";

        ParamArray pa = new ParamArray();

        pa.set("", leadId);
        pa.set("", attrId);

        return executeUpdate(sqlStr, pa);
    }

    /**
     * 
     * Description: 查询<br> 
     *  
     * @author <br>
     * @taskId <br>
     * @param leadId Long
     * @param attrId Long
     * @return SfaLeadAttrValueDto
     * @throws BaseAppException <br>
     */
    public SfaLeadAttrValueDto selectSfaLeadAttrValue(Long leadId, Long attrId) throws BaseAppException {
        String sqlStr = "SELECT \r\n" + " LEAD_ID,ATTR_ID,VALUE,SP_ID \r\n" + " FROM  SFA_LEAD_ATTR_VALUE \r\n"
            + " WHERE LEAD_ID=? AND ATTR_ID=?";

        ParamArray pa = new ParamArray();
        pa.set("", leadId);
        pa.set("", attrId);

        return query(sqlStr, pa, null, new RowSetMapper<SfaLeadAttrValueDto>() {
            public SfaLeadAttrValueDto mapRows(RowSetOperator op, ResultSet rs, int colNum, Object para)
                throws SQLException, BaseAppException {
                SfaLeadAttrValueDto dto = null;
                if (rs.next()) {
                    int dbloop = 1;
                    dto = new SfaLeadAttrValueDto();
                    dto.setLeadId(op.getLong(rs, dbloop++));
                    dto.setAttrId(op.getLong(rs, dbloop++));
                    dto.setValue(op.getString(rs, dbloop++));
                    dto.setSpId(op.getLong(rs, dbloop++));
                }
                return dto;
            }
        });
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author <br>
     * @taskId <br>
     * @param leadId Long
     * @return List<SfaLeadAttrValueDto>
     * @throws BaseAppException <br>
     */
    public List<SfaLeadAttrValueDto> selectSfaLeadAttrValue(Long leadId) throws BaseAppException {
        String sqlStr = "SELECT \r\n" + " LEAD_ID,ATTR_ID,VALUE,SP_ID \r\n" + " FROM  SFA_LEAD_ATTR_VALUE \r\n"
            + " WHERE LEAD_ID=?";

        ParamArray pa = new ParamArray();
        pa.set("", leadId);

        return query(sqlStr, pa, null, new RowSetMapper<List<SfaLeadAttrValueDto>>() {
            public List<SfaLeadAttrValueDto> mapRows(RowSetOperator op, ResultSet rs, int colNum, Object para)
                throws SQLException, BaseAppException {
                List<SfaLeadAttrValueDto> objList = new ArrayList<SfaLeadAttrValueDto>();
                SfaLeadAttrValueDto dto = null;
                while (rs.next()) {
                    int dbloop = 1;
                    dto = new SfaLeadAttrValueDto();
                    dto.setLeadId(op.getLong(rs, dbloop++));
                    dto.setAttrId(op.getLong(rs, dbloop++));
                    dto.setValue(op.getString(rs, dbloop++));
                    dto.setSpId(op.getLong(rs, dbloop++));
                    objList.add(dto);
                }
                return objList;
            }
        });
    }
}
